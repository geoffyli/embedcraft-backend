# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from services import embeddings_pb2 as embeddings__pb2


class EmbeddingsServiceStub(object):
    """The embeddings service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainEmbeddings = channel.unary_unary(
                '/EmbeddingsService/TrainEmbeddings',
                request_serializer=embeddings__pb2.TrainRequest.SerializeToString,
                response_deserializer=embeddings__pb2.TrainResponse.FromString,
                )


class EmbeddingsServiceServicer(object):
    """The embeddings service definition.
    """

    def TrainEmbeddings(self, request, context):
        """Sends a request to train new word embeddings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmbeddingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainEmbeddings': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainEmbeddings,
                    request_deserializer=embeddings__pb2.TrainRequest.FromString,
                    response_serializer=embeddings__pb2.TrainResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EmbeddingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmbeddingsService(object):
    """The embeddings service definition.
    """

    @staticmethod
    def TrainEmbeddings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmbeddingsService/TrainEmbeddings',
            embeddings__pb2.TrainRequest.SerializeToString,
            embeddings__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GreeterStub(object):
    """The greeter service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/Greeter/SayHello',
                request_serializer=embeddings__pb2.HelloRequest.SerializeToString,
                response_deserializer=embeddings__pb2.HelloReply.FromString,
                )


class GreeterServicer(object):
    """The greeter service definition.
    """

    def SayHello(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=embeddings__pb2.HelloRequest.FromString,
                    response_serializer=embeddings__pb2.HelloReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """The greeter service definition.
    """

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/SayHello',
            embeddings__pb2.HelloRequest.SerializeToString,
            embeddings__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
