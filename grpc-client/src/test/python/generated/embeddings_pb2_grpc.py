# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from generated import embeddings_pb2 as embeddings__pb2


class ModelTrainingServiceStub(object):
    """The training service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainModel = channel.unary_unary(
                '/ModelTrainingService/TrainModel',
                request_serializer=embeddings__pb2.TrainRequest.SerializeToString,
                response_deserializer=embeddings__pb2.TrainResponse.FromString,
                )
        self.QueryTrainingStatus = channel.unary_unary(
                '/ModelTrainingService/QueryTrainingStatus',
                request_serializer=embeddings__pb2.StatusQueryRequest.SerializeToString,
                response_deserializer=embeddings__pb2.StatusQueryResponse.FromString,
                )


class ModelTrainingServiceServicer(object):
    """The training service definition.
    """

    def TrainModel(self, request, context):
        """Sends training settings and dataset to Python for model training
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryTrainingStatus(self, request, context):
        """Query the status of the training task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelTrainingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainModel': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainModel,
                    request_deserializer=embeddings__pb2.TrainRequest.FromString,
                    response_serializer=embeddings__pb2.TrainResponse.SerializeToString,
            ),
            'QueryTrainingStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryTrainingStatus,
                    request_deserializer=embeddings__pb2.StatusQueryRequest.FromString,
                    response_serializer=embeddings__pb2.StatusQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ModelTrainingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelTrainingService(object):
    """The training service definition.
    """

    @staticmethod
    def TrainModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelTrainingService/TrainModel',
            embeddings__pb2.TrainRequest.SerializeToString,
            embeddings__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryTrainingStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelTrainingService/QueryTrainingStatus',
            embeddings__pb2.StatusQueryRequest.SerializeToString,
            embeddings__pb2.StatusQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ModelEvaluationServiceStub(object):
    """The evaluation service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifyModelLoading = channel.unary_unary(
                '/ModelEvaluationService/NotifyModelLoading',
                request_serializer=embeddings__pb2.NotifyModelLoadingRequest.SerializeToString,
                response_deserializer=embeddings__pb2.NotifyModelLoadingResponse.FromString,
                )
        self.QuerySimilarWordList = channel.unary_unary(
                '/ModelEvaluationService/QuerySimilarWordList',
                request_serializer=embeddings__pb2.QuerySimilarWordListRequest.SerializeToString,
                response_deserializer=embeddings__pb2.QuerySimilarWordListResponse.FromString,
                )


class ModelEvaluationServiceServicer(object):
    """The evaluation service definition
    """

    def NotifyModelLoading(self, request, context):
        """Notify the Python application to load the trained model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySimilarWordList(self, request, context):
        """Query the similar word list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelEvaluationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifyModelLoading': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyModelLoading,
                    request_deserializer=embeddings__pb2.NotifyModelLoadingRequest.FromString,
                    response_serializer=embeddings__pb2.NotifyModelLoadingResponse.SerializeToString,
            ),
            'QuerySimilarWordList': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySimilarWordList,
                    request_deserializer=embeddings__pb2.QuerySimilarWordListRequest.FromString,
                    response_serializer=embeddings__pb2.QuerySimilarWordListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ModelEvaluationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelEvaluationService(object):
    """The evaluation service definition
    """

    @staticmethod
    def NotifyModelLoading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelEvaluationService/NotifyModelLoading',
            embeddings__pb2.NotifyModelLoadingRequest.SerializeToString,
            embeddings__pb2.NotifyModelLoadingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuerySimilarWordList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelEvaluationService/QuerySimilarWordList',
            embeddings__pb2.QuerySimilarWordListRequest.SerializeToString,
            embeddings__pb2.QuerySimilarWordListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
