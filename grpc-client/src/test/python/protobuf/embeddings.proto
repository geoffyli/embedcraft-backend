syntax = "proto3";


// The training service definition.
service ModelTrainingService {
  // Sends training settings and dataset to Python for model training
  rpc TrainModel(TrainRequest) returns (TrainResponse);

  // Query the status of the training task
  rpc QueryTrainingStatus(StatusQueryRequest) returns (StatusQueryResponse);
}

// The evaluation service definition
service  ModelEvaluationService {
  // Notify the Python application to load the trained model
  rpc NotifyModelLoading(NotifyModelLoadingRequest) returns (NotifyModelLoadingResponse);

  // Query the similar word list
  rpc QuerySimilarWordList(QuerySimilarWordListRequest) returns (QuerySimilarWordListResponse);
}

// The request message containing the training settings and dataset.
message TrainRequest {
  string name = 1;
  string tag = 2;
  string algorithm = 3;
  string blobName = 4;
  int32 minCount = 5;
  int32 vectorSize = 6;
  int32 windowSize = 7;
  int32 epochs = 8;
}

// The response message containing the training results.
message TrainResponse {
  string message = 1;
  string taskId = 2;
}


// The request message containing the training settings and dataset.
message StatusQueryRequest {
  string taskId = 1;
}

// The response message containing the training results.
message StatusQueryResponse {
  int32 status = 1;

  string name = 2;
  string tag = 3;
  string algorithm = 4;
  int32 minCount = 5;
  int32 vectorSize = 6;
  int32 windowSize = 7;
  int32 epochs = 8;
  int32 trainingTime = 9; // Training time in seconds
  int32 vocabularySize = 10;
  string modelFilePath = 11;

  repeated float lossOverTime = 12;
}


// The request message containing the model file path.
message NotifyModelLoadingRequest{
  string modelFilePath = 1;
}

// The request message containing the message.
message NotifyModelLoadingResponse{
  string message = 1;
}

message QuerySimilarWordListRequest{
  string modelFilePath = 1;
  string word = 2;
}

// Define a message for the nested structure (float and list of floats)
message WordData {
  float similarity = 1;
  repeated float coordinates = 2; // Assuming 2D coordinates
}

// The response message containing similar word list
message QuerySimilarWordListResponse{
  map<string, WordData> words = 1;
}

// python3 -m grpc_tools.protoc -I./protobuf --python_out=./generated --grpc_python_out=./generated ./protobuf/embeddings.proto
